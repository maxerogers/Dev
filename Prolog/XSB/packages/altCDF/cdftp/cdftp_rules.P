
:- [cdftp_meta].
:- [cdftp_cdfsc].

:- export check_rule/1, dlrule_to_cdf/3, dlrule_to_cdf/4, body_ce_to_formula/4.

:- import allAttr/3, hasAttr/3, 
	   isa/2, maxAttr/4, minAttr/4,
	   cdf_id_fields/4 from cdf_init_cdf.
:- import get_component_intensional/3 from cdf_comps_share.
:- import cdf_warning/2 from cdf_exceptions.
:- import pretty_print/1 from newpp.
%:- import compdlrule/3,compdltrans/3 from usermod.
:- import compdltrans/3 from usermod.
:- import member/2 from basics.
:- import cdf_flags/2 from usermod.

dlrule_to_cdf('<='(Head,Body),Name,CDFList):-
	dlrule_to_cdf('<='(Head,Body),Name,CDFList,_).

dlrule_to_cdf('<='(Head,Body),Name,CDFList,Cmpt):- 
	head_ce_to_formula(Head,V,HeadList,[],Cmpt),
%	(var(Cmpt) -> 
%	    cdf_warning(rule,('No component info given in rule: ',
%	                           '<='(Head,Body)))
%	;  asserta(compdlrule(Cmpt,Head,Body)) ),
	body_ce_to_formula(Body,V,Name,BodyF),
%	add_cmpt_check_to_body(BodyF,V,Cmpt,BodyCF),	
	distribute_heads_to_bodies(HeadList,BodyF,CDFList),
	assert_translation_facts(Cmpt,CDFList).

assert_translation_facts(Cmpt,CDFList):- 
	member((:-(H,B)),CDFList),
	%%	write(userout,H),writeln(userout,' :-'),
	%%      write(userout,'    '),writeln(userout,B),
	asserta(compdltrans(Cmpt,H,B)),
	fail.
assert_translation_facts(_Cmpt,_CDFList).

head_ce_to_formula(','(CE1,CE2),Var,ListIn,ListOut,Cmpt):- !,
	head_ce_to_formula(CE1,Var,ListIn,ListMid,Cmpt),
	head_ce_to_formula(CE2,Var,ListMid,ListOut,Cmpt).
head_ce_to_formula(exists(R,Cid),Var,
	                   [hasAttr_int(Var,R,Cid)|L],L,Cmpt):- !,
	cdf_id_fields(Cid,cid,_,_),
	get_component_intensional(hasAttr_int(Var,R,Cid), _, Cmpt).
head_ce_to_formula(all(R,Cid),Var,
	                   [allAttr_int(Var,R,Cid)|L],L,Cmpt):- !,
	cdf_id_fields(Cid,cid,_,_),
	get_component_intensional(allAttr_int(Var,R,Cid), _, Cmpt).
head_ce_to_formula(atLeast(N,R,Cid),Var,
	                   [minAttr_int(Var,R,Cid,N)|L],L,Cmpt):- !,
	cdf_id_fields(Cid,cid,_,_),
	get_component_intensional(minAttr_int(Var,R,Cid,N), _, Cmpt).
head_ce_to_formula(atMost(N,R,Cid),Var,
	                  [maxAttr_int(Var,R,Cid,N)|L],L,Cmpt):- !,
	cdf_id_fields(Cid,cid,_,_),
	get_component_intensional(maxAttr_int(Var,R,Cid,N), _, Cmpt).
head_ce_to_formula(component(Cmpt),_Var,L,L,Cmpt):- !.
head_ce_to_formula(Cid,Var,[isa_int(Var,Cid)|L],L,_Cmpt):- 
	cdf_id_fields(Cid,cid,_,_),!.
head_ce_to_formula(CE,_,_,_,_Cmpt):- !,
	cdf_warning(rule,('Incorrectly formed Head Expression in DL Rule ',
	                           CE)),
	fail.
	
:- import proper_isa/2 from cdf_init_cdf.
body_ce_to_formula(CE,Var,_Name,isa(Var,CE)) :- var(CE), !.  %but this doesn't work for eval, and is inefficient for tables.
body_ce_to_formula(','(CE1,CE2),Var,Name,Res):- !,
	body_ce_to_formula(CE1,Var,Name,F1),
	body_ce_to_formula(CE2,Var,Name,F2),
	(F2 == true -> Res=F1 ; F1 == true -> Res=F2 ; Res = (F1,F2)).
body_ce_to_formula(';'(CE1,CE2),Var,Name,';'(F1,F2)):- !,
	body_ce_to_formula(CE1,Var,Name,F1),
	body_ce_to_formula(CE2,Var,Name,F2).
body_ce_to_formula(not(CE1),Var,Name,\+(F1)):- !,
	body_ce_to_formula(CE1,Var,Name,F1).
body_ce_to_formula(exists(R,CE1),Var,Name,F):- !,
	(\+ground(CE1),cdf_flags(dlrule,no_inheritance)
	 ->	F = hasAttr(Var,R,CE1)
	 ;	body_ce_to_formula(CE1,Var1,Name,F1),
		(F1 == true
		 ->	F = hasAttr(Var,R,Var1)
		 ;	F = (hasAttr(Var,R,Var1),F1)
		)
	).
body_ce_to_formula(exists_immed(R,CE1),Var,_Name,F):- !,
	F = hasAttr(Var,R,CE1).
body_ce_to_formula(all(R,CE1),Var,Name,','(allAttr(Var,R,Var1),F1)):- !,
	body_ce_to_formula(CE1,Var1,Name,F1).
body_ce_to_formula(atLeast(N,R,CE),Var,Name,','(minAttr(Var,R,Var1,N),F1)):- !,
	body_ce_to_formula(CE,Var1,Name,F1).
body_ce_to_formula(atMost(N,R,CE),Var,Name,','(maxAttr(Var,R,Var1,N),F1)):- !,
	body_ce_to_formula(CE,Var1,Name,F1).
body_ce_to_formula(is(Targ,Expr),_Var,_Name,dlEval(Expr,Targ)) :- !.
body_ce_to_formula(Table,_Var,Name,DLTable) :-
	functor(Table,dlTable,Arity), Arity < 11, % MAX dlTable
	!,
	Table =.. [dlTable|Args],
	DLTable =.. [dlTable,Name|Args].
body_ce_to_formula(Cid,Var,_Name,Test):- 
	cdf_id_fields(Cid,cid,_,_),!,
	(proper_isa(_,Cid) -> Test = isa(Var,Cid) ; Var=Cid, Test = true). % optimization for indexing
body_ce_to_formula(trace,_,_,trace) :- !.
body_ce_to_formula(CE,_,_,_):- 
	cdf_warning(rule,('Dont know how to translate ',CE)),fail.

%% There should be a hook that allows a user to redefine this.  If no
%% hook, then use XSB's is/2.
:- import dlEval_user/2 from usermod.
dlEval(Expr,Cid) :-
	(if_predicate_defined(dlEval_user(_,_))
	 ->	dlEval_user(Expr,Cid)
	 ;	Cid = cid(Var,cdfpt),
		Var is Expr
	).

:- import term_psc/2, psc_type/2 from machine.
if_predicate_defined(Skel) :-
    term_psc(Skel,Psc),
    psc_type(Psc,Type),
    Type =\= 0,			%  != T_ORDI
    Type =\= 12.		%  != T_UDEF, not loaded


/*
add_cmpt_check_to_body(','(A,B),V,Cmpt,','(NewA,B)):- !,
	add_cmpt_check_to_body(A,V,Cmpt,NewA).
add_cmpt_check_to_body(A,V,Cmpt,','(A,cdf_id_fields(V,_,_,Cmpt))):- !.
*/

pretty_print_list([]).
pretty_print_list([H|R]):- 
	pretty_print(H),
	nl,
	pretty_print_list(R).

distribute_heads_to_bodies([],_Body,[]).
distribute_heads_to_bodies([Head|Rest],BodyF,[(Head :- BodyF)|RRest]):- 
	distribute_heads_to_bodies(Rest,BodyF,RRest).
	
check_rule(Rule):- 
	dlrule_to_cdf(Rule,dummy,CDFList),
	pretty_print_list(CDFList).

end_of_file.

/*	
body_ce_to_formula(exists(R,CE1),Var,','(hasAttr(Var,R,Var1),F1)):- !,
	body_ce_to_formula(CE1,Var1,F1).
body_ce_to_formula(all(R,CE1),Var,\+(','(hasAttr(Var,R,Var1),\+((F1))))):- !,
	body_ce_to_formula(CE1,Var1,F1).
body_ce_to_formula(atLeast(N,R,CE),Var,atLeast(N,Var,F1)):- !,
	body_ce_to_formula(exists(R,CE),Var,F1).
body_ce_to_formula(atMost(N,R,CE),Var,atMost(N,Var,F1)):- !,
	body_ce_to_formula(exists(R,CE),Var,F1).
*/

atLeast(N,Var,F):-
	findall(Var,F,Insts),
	sort(Insts,Uniq),
	length(Uniq,L),
	L >= N.

atMost(N,Var,F):-
	findall(Var,F,Insts),
	sort(Insts,Uniq),
	length(Uniq,L),
	L =< N.


