'''
Brute-force, backtracking Sudoku solver in about fifteen lines.

Works on Python 2.6 and Python 3.
'''
def solve(s):
    ''' 
    Solve a Sudoku:

    - Accepts s, a sequence of 81 integers from 0 to 9 in row of
    column order, zeros indicating the cells to fill.

    - Returns the first found solution as a sequence of 81 integers in
    the 1 to 9 interval (same row or column order than input), or None
    if no solution exists.
    '''
    try:
        i  = s.index(0)
    except ValueError: 
        # No empty cell left: solution found
        return s

    c = [s[j] for j in range(36)
         if not ((i-j)%6 * (i//6^j//6) * (i//18^j//18 | (i%6//3^j%6//2)))]

    for v in range(1, 7):
        if v not in c:
            r = solve(s[:i]+[v]+s[i+1:])
            if r is not None:
                return r

#-------------------------------------------------------------------------------
# Let's test it!
#
from time import clock
if __name__ == '__main__':
    class Sudoku(list):
        '''Sudokus with nicer IO'''
        def __init__(self, content):
            list.__init__(self, [int(i) for i in content.split()] 
                          if isinstance(content, str) else content)
        def __str__(self):
            return '\n'.join(
                ' '.join([(str(j) if j != 0 else '-') 
                          for j in self[i*9:(i+1)*9]]) for i in range(9))

    problem = Sudoku('''
        2 1 0 0 4 3
		0 0 0 0 0 0
		0 0 6 2 0 0
		0 0 3 4 0 0
		0 0 0 0 0 0
		3 4 0 0 5 6
        ''')

    solution = Sudoku('''
        2 1 5 6 4 3
		6 3 4 5 1 2
		4 5 6 2 3 1
		1 2 3 4 6 5
		5 6 1 3 2 4
		3 4 2 1 5 6
        ''')
    startTime = clock()
    result = Sudoku(solve(problem))
    endTime = startTime - clock()
    print('==== Problem ====\n{0}\n\n=== Solution ====\n{1}'.format(
            problem, result))
    print("It took "+str(endTime)+"seconds to complete this puzzle")
    assert(result == solution)
